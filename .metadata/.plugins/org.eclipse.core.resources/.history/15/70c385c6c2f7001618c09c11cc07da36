// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6419.RobotFull.commands;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6419.RobotFull.Robot;
import org.usfirst.frc6419.RobotFull.RobotMap;
import org.usfirst.frc6419.RobotFull.subsystems.BallLauncher;
import org.usfirst.frc6419.RobotFull.subsystems.BallLauncher.Shaker;

/**
 *
 */
public class AutonomousCommand extends Command {
	BallLauncher launcher = new BallLauncher();
	int forwardTime = 5000;
	int sidewaysTime = 5000;
	int m1 = 1;
	int m2 = -1;
	int m3 = m2;
	int m4 = m1;
	
	SpeedController driveMotor1 = RobotMap.chassisdriveMotor1;
	SpeedController driveMotor2 = RobotMap.chassisdriveMotor2;
	SpeedController driveMotor3 = RobotMap.chassisdriveMotor3;
	SpeedController driveMotor4 = RobotMap.chassisdriveMotor4;
    private final DoubleSolenoid driveMechanismSwitch = RobotMap.chassisDriveMechanismSwitch;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.chassis.init();
		driveMechanismSwitch.set(DoubleSolenoid.Value.kReverse);
		launcher.startLauncher();

    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

		driveMotor1.set(1);
		driveMotor2.set(1);
		driveMotor3.set(1);
		driveMotor4.set(1);
		
	try {
		Thread.sleep(forwardTime);
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	driveMotor1.set(0);
	driveMotor2.set(0);
	driveMotor3.set(0);
	driveMotor4.set(0);
	
	driveMotor1.set(m1);
	driveMotor2.set(m2);
	driveMotor3.set(m3);
	driveMotor4.set(m4);
	
	try {
		Thread.sleep(sidewaysTime);
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	driveMotor1.set(0);
	driveMotor2.set(0);
	driveMotor3.set(0);
	driveMotor4.set(0);
	try {
		Thread.sleep(1000);
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	launcher.startHexapus();
	try {
		Thread.sleep(4000);
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	Shaker shaker = Robot.ballLauncher.new Shaker();
	shaker.start();
	while(shaker.isLive()){
		try {
			Thread.sleep(50);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
