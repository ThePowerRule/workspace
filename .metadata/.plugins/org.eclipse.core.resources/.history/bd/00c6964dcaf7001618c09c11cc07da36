// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6419.RobotFull.commands;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6419.RobotFull.Robot;
import org.usfirst.frc6419.RobotFull.RobotMap;
import org.usfirst.frc6419.RobotFull.subsystems.BallLauncher;
import org.usfirst.frc6419.RobotFull.subsystems.BallLauncher.Shaker;

/**
 *
 */
public class AutonomousCommand extends Command {
	LaunchCommand launcher;
	double forwardTime = 5;
	double sidewaysTime = 5;
	int m1 = 1;
	int m2 = -1;
	int m3 = m2;
	int m4 = m1;

	SpeedController driveMotor1 = RobotMap.chassisdriveMotor1;
	SpeedController driveMotor2 = RobotMap.chassisdriveMotor2;
	SpeedController driveMotor3 = RobotMap.chassisdriveMotor3;
	SpeedController driveMotor4 = RobotMap.chassisdriveMotor4;
	private final DoubleSolenoid driveMechanismSwitch = RobotMap.chassisDriveMechanismSwitch;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutonomousCommand() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.chassis.init();
		driveMechanismSwitch.set(DoubleSolenoid.Value.kReverse);

		launcher = Robot.ballLauncher.getCurrentLaunchCommand();

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if(Timer.getMatchTime()<.5){
		launcher.setLaunching(true);
		_isFinished = true;
		driveMotor1.set(1);
		driveMotor2.set(1);
		driveMotor3.set(1);
		driveMotor4.set(1);
		}
if(Timer.getMatchTime()<.5+forwardTime){
		driveMotor1.set(0);
		driveMotor2.set(0);
		driveMotor3.set(0);
		driveMotor4.set(0);
}
if(Timer.getMatchTime()<.5+forwardTime+sidewaysTime){
		driveMotor1.set(m1);
		driveMotor2.set(m2);
		driveMotor3.set(m3);
		driveMotor4.set(m4);
}
if(Timer.getMatchTime()<.5+forwardTime+2*sidewaysTime){
	

		Timer.delay(sidewaysTime);
		driveMotor1.set(0);
		driveMotor2.set(0);
		driveMotor3.set(0);
		driveMotor4.set(0);}
		Timer.delay(1);
		launcher.setFeeding(true);
		Timer.delay(4);
		launcher.setShaking(true);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return _isFinished;
	}
	protected boolean _isFinished = false;

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
