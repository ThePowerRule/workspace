// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6419.RobotFull;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisdriveMotor1;
    public static SpeedController chassisdriveMotor2;
    public static SpeedController chassisdriveMotor3;
    public static SpeedController chassisdriveMotor4;
    public static RobotDrive chassisChassisDrive;
    public static DoubleSolenoid chassisDriveMechanismSwitch;
    public static Solenoid chassisQuickDriveSlenoid;
    public static Compressor pneumaticsControlCompressor;
    public static SpeedController ballLauncherHexapus;
    public static SpeedController ballLauncherFeeder;
    public static Encoder ballLauncherLauncherEncoder;
    public static SpeedController ballLauncherLauncher;
    public static PIDController ballLauncherPIDController1;
    public static SpeedController climberSpeedController1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static ADXRS450_Gyro gyro;//Initialize the gyro sensor
    
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisdriveMotor1 = new VictorSP(1);
        LiveWindow.addActuator("Chassis", "driveMotor1", (VictorSP) chassisdriveMotor1);
        
        chassisdriveMotor2 = new VictorSP(2);
        LiveWindow.addActuator("Chassis", "driveMotor2", (VictorSP) chassisdriveMotor2);
        
        chassisdriveMotor3 = new VictorSP(3);
        LiveWindow.addActuator("Chassis", "driveMotor3", (VictorSP) chassisdriveMotor3);
        
        chassisdriveMotor4 = new VictorSP(4);
        LiveWindow.addActuator("Chassis", "driveMotor4", (VictorSP) chassisdriveMotor4);
        
        chassisChassisDrive = new RobotDrive(chassisdriveMotor1, chassisdriveMotor3,
              chassisdriveMotor2, chassisdriveMotor4);
        
        chassisChassisDrive.setSafetyEnabled(true);
        chassisChassisDrive.setExpiration(0.1);
        chassisChassisDrive.setSensitivity(0.5);
        chassisChassisDrive.setMaxOutput(1.0);

        chassisDriveMechanismSwitch = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Chassis", "DriveMechanismSwitch", chassisDriveMechanismSwitch);
        
        chassisQuickDriveSlenoid = new Solenoid(0, 7);
        LiveWindow.addActuator("Chassis", "QuickDriveSlenoid", chassisQuickDriveSlenoid);
        
        pneumaticsControlCompressor = new Compressor(0);
        
        
        ballLauncherHexapus = new VictorSP(7);
        LiveWindow.addActuator("BallLauncher", "Hexapus", (VictorSP) ballLauncherHexapus);
        
        ballLauncherFeeder = new VictorSP(6);
        LiveWindow.addActuator("BallLauncher", "Feeder", (VictorSP) ballLauncherFeeder);
        
        ballLauncherLauncherEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("BallLauncher", "Launcher Encoder", ballLauncherLauncherEncoder);
        ballLauncherLauncherEncoder.setDistancePerPulse(0.08333333333333333);
        ballLauncherLauncherEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        ballLauncherLauncher = new VictorSP(5);
        LiveWindow.addActuator("BallLauncher", "Launcher", (VictorSP) ballLauncherLauncher);
        
        ballLauncherPIDController1 = new PIDController(1.0, 0.0, 0.0, 0.0, ballLauncherLauncherEncoder, ballLauncherLauncher, 0.02);
        LiveWindow.addActuator("BallLauncher", "PID Controller 1", ballLauncherPIDController1);
        ballLauncherPIDController1.setContinuous(false);
        ballLauncherPIDController1.setAbsoluteTolerance(0.2);

        ballLauncherPIDController1.setOutputRange(-1.0, 1.0);
        climberSpeedController1 = new VictorSP(0);
        LiveWindow.addActuator("climber", "Speed Controller 1", (VictorSP) climberSpeedController1);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    	gyro = new ADXRS450_Gyro(); 
    	gyro.calibrate();
    }
}
