// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6419.RobotFull.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6419.RobotFull.Robot;
import org.usfirst.frc6419.RobotFull.subsystems.BallLauncher;
import org.usfirst.frc6419.RobotFull.subsystems.BallLauncher.Shaker;

/**
 *
 */
public class LaunchCommand extends Command {
	BallLauncher.Shaker shaker;
	private boolean isLaunching = false,
			isFeeding = false,
			isClimbing = false,
			isReverse = false,
			isShaking = false;
			
			
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LaunchCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ballLauncher);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(isLaunching){
    		Robot.ballLauncher.startLauncher();
    	}
    	else{
    		Robot.ballLauncher.stopLauncher();
    	}
    	if(isFeeding && shaker == null){
    		Robot.ballLauncher.startHexapus();
    	}
    	else if (shaker == null){
    		Robot.ballLauncher.stopHexapus();
    	}
    	if(isClimbing){
    		Robot.climber.startclimber();
    	}
    	else if(isReverse){
    		Robot.climber.reverseclimber();
    	}
    	else{
    		Robot.climber.stopclimber();
    	}
    	if(isShaking){
    		if(shaker == null){
    			shaker = Robot.ballLauncher.new Shaker();
    			shaker.start();
    		}
    	}
		if(shaker != null){
			if(!shaker.isLive()) {
				shaker = null;
				isShaking = false;
			}
		}
    }
    
    public void teleopControls(){
    	if(Robot.oi.getDriveJoystick().getRawButton(5)) isLaunching = true;
    	if(Robot.oi.getDriveJoystick().getRawButton(3)) isLaunching = false;
    	if(Robot.oi.getDriveJoystick().getRawButton(6)) isFeeding = true;
    	if(Robot.oi.getDriveJoystick().getRawButton(4)) isFeeding = false;
    	if(Robot.oi.getDriveJoystick().getRawButton(12)) isClimbing = false;
    	if(Robot.oi.getDriveJoystick().getRawButton(11)) isClimbing = true;
    	if(Robot.oi.getDriveJoystick().getRawButton(9)) isReverse = true;
    	if(Robot.oi.getDriveJoystick().getRawButton(12)) isReverse = false;
    	if(Robot.oi.getDriveJoystick().getRawButton(7)) isShaking = true;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
