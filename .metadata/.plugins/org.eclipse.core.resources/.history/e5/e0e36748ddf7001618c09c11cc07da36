// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6419.RobotFull.subsystems;

import org.usfirst.frc6419.RobotFull.RobotMap;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Chassis extends Subsystem {

	private boolean isMech = false;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController driveMotor1 = RobotMap.chassisdriveMotor1;
    private final SpeedController driveMotor2 = RobotMap.chassisdriveMotor2;
    private final SpeedController driveMotor3 = RobotMap.chassisdriveMotor3;
    private final SpeedController driveMotor4 = RobotMap.chassisdriveMotor4;
    private final RobotDrive chassisDrive = RobotMap.chassisChassisDrive;
    private final DoubleSolenoid driveMechanismSwitch = RobotMap.chassisDriveMechanismSwitch;
    private final Solenoid quickDriveSlenoid = RobotMap.chassisQuickDriveSlenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void init(){
    	disableQuickDriveSolenoid();
    }
    public void drive(Joystick j){
    	if(j.getRawButton(1))isMech = true;
    	if(j.getRawButton(2))isMech = false;
    	if(j.getRawButton(3))enableQuickDriveSolenoid();
    	if(j.getRawButton(4))disableQuickDriveSolenoid();
    	SmartDashboard.putBoolean("Mecanum: ", isMech);
    	if(isMech){
    		//The mecanum button is pressed, so use drive controls accordingly
    		driveMechanismSwitch.set(DoubleSolenoid.Value.kReverse);
    		double m1 = 0, m2 = 0, m3 = 0, m4 = 0, 
    				r = Math.toRadians(RobotMap.gyro.getAngle());
    		double x = j.getRawAxis(0),
    				y = j.getRawAxis(1),
    				z = j.getRawAxis(2);
    		m1 = (-y + x + z)/3.0;
    		m2 = (-y - x - z)/3.0;
    		m3 = (-y - x + z)/3.0;
    		m4 = (-y + x - z)/3.0;
    		//Reverse the directions of motors 
    		m1 = -m1;
    		m3 = -m3;
    		driveMotor1.set(m1);
    		driveMotor2.set(m2);
    		driveMotor3.set(m3);
    		driveMotor4.set(m4);
        	SmartDashboard.putNumber("RF", m1);
        	SmartDashboard.putNumber("LF", m2);
        	SmartDashboard.putNumber("RB", m3);
        	SmartDashboard.putNumber("LB", m4);
        	SmartDashboard.putNumber("Rotation", Math.toDegrees(r));
    	}
    	else{
    		driveMechanismSwitch.set(DoubleSolenoid.Value.kForward);
    		double x = j.getRawAxis(2),
    				y = j.getRawAxis(1);
    		chassisDrive.arcadeDrive(y, x);
        	SmartDashboard.putNumber("RF", driveMotor2.get());
        	SmartDashboard.putNumber("LF", driveMotor1.get());
        	SmartDashboard.putNumber("RB", driveMotor4.get());
        	SmartDashboard.putNumber("LB", driveMotor3.get());
    	}
    	//
    }
    public void enableQuickDriveSolenoid(){
    	quickDriveSlenoid.set(true);
    }
    public void disableQuickDriveSolenoid(){
    	quickDriveSlenoid.set(false);
    }
    public void driveForward(double speed){
		driveMotor1.set(speed);
		driveMotor2.set(-speed);
		driveMotor3.set(speed);
		driveMotor4.set(-speed);
    }
    public void driveTurning(double speed){
		driveMotor1.set(speed);
		driveMotor2.set(speed);
		driveMotor3.set(speed);
		driveMotor4.set(speed);
    }
}

