package org.usfirst.frc.team201700090.robot;


import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This is a demo program showing the use of the RobotDrive class, specifically it 
 * contains the code necessary to operate a robot with tank drive.
 *
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SampleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * WARNING: While it may look like a good choice to use for your code if you're inexperienced,
 * don't. Unless you know what you are doing, complex code will be much more difficult under
 * this system. Use IterativeRobot or Command-Based instead if you're new.
 */
public class Robot extends SampleRobot {
    RobotDrive myRobot;  // class that handles basic drive operations
    Joystick logitech;
    public Robot() {
        myRobot = new RobotDrive(2,1,4,3);
        myRobot.setExpiration(0.1);
        logitech = new Joystick(0);

    }

    
    /**
     * Runs the motors with tank steering.
     */
    public void operatorControl() {
        myRobot.setSafetyEnabled(true);
        while (isOperatorControl() && isEnabled()) {
        	//Turning
        	double rxd = logitech.getRawAxis(4);
        	//Drive
        	double rdd = logitech.getRawAxis(3);
        	//Reverse
        	double rrd = logitech.getRawAxis(2);
        	//Boost
        	boolean boost = logitech.getRawButton(5);
        	/*
        	SmartDashboard.putString("Left value", String.valueOf(rawL));
        	SmartDashboard.putString("Right value", String.valueOf(rawR));
            leftStick = -Math.pow(rawL,3)*.5f;
            rightStick = -Math.pow(rawR,3)*.5f;
        	SmartDashboard.putString("Left corrected value", String.valueOf(leftStick));
        	SmartDashboard.putString("Right corrected value", String.valueOf(rightStick));*/
        	SmartDashboard.putString("Turning", String.valueOf(rxd));
        	SmartDashboard.putString("Drive", String.valueOf(rdd));
        	SmartDashboard.putString("Reverse", String.valueOf(rrd));
        	SmartDashboard.putString("Boost?", String.valueOf(boost));
        	//myRobot.tankDrive(leftStick, rightStick);
            Timer.delay(0.005);		// wait for a motor update time
        }
    }

}
