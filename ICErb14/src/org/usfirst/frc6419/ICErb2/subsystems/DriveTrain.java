// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6419.ICErb2.subsystems;

import org.usfirst.frc6419.ICErb2.RobotMap;
import org.usfirst.frc6419.ICErb2.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController driveMotor1 = RobotMap.driveTrainDriveMotor1;
    private final SpeedController driveMotor2 = RobotMap.driveTrainDriveMotor2;
    private final SpeedController driveMotor3 = RobotMap.driveTrainDriveMotor3;
    private final SpeedController driveMotor4 = RobotMap.driveTrainDriveMotor4;
    private final RobotDrive mainChassis = RobotMap.driveTrainMainChassis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Teleop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void operatorControl(Joystick joystick){
    	double yStick = -joystick.getRawAxis(1),	
    			xStick = joystick.getRawAxis(0),
    			maxVal = (joystick.getRawAxis(3)+1)/2;
		double rawL = (ramp(yStick)+ramp(xStick))*maxVal;
		double rawR = (ramp(yStick)-ramp(xStick))*maxVal;
		SmartDashboard.putNumber("Left value", rawL);
		SmartDashboard.putNumber("Right value", rawR);
		SmartDashboard.putNumber("Maximum value", maxVal);
		mainChassis.tankDrive(rawL, rawR);
    }
    public double ramp(double value){
		return value>0?Math.pow(value, 2):-Math.pow(value, 2);
	}
    
    public void stop(){
    	mainChassis.tankDrive(0,0);
    }
}

